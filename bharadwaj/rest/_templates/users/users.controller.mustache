const express = require('express');
const router = express.Router();
const userService = require('./user.service');
const authorize = require('_helpers/authorize')
const Role = require('_helpers/role');

const handleUser = res => user => 
    user ? res.json(user) : res.status(400).json({ message: 'Error'});

const handleError = next => err => next(err);

// ROUTES

{{#get.public}} 
router.get('/{{.}}', {{.}}); 
{{/get.public}}

{{#get.admin}} 
router.get('/{{.}}', authorize(Role.Admin), {{.}}); 
{{/get.admin}}

{{#get.admin_self}} 
router.get('/{{.}}/:userId', authorize(), {{.}}); 
{{/get.admin_self}}

{{#get.user}} 
router.get('/{{.}}', authorize(), {{.}}); 
{{/get.user}}

{{#post.public}} 
router.post('/{{.}}', {{.}}); 
{{/post.public}}

{{#post.admin}} 
router.post('/{{.}}', authorize(Role.Admin), {{.}}); 
{{/post.admin}}

{{#post.admin_self}} 
router.post('/{{.}}/:userId', authorize(), {{.}});  
{{/post.admin_self}}

{{#post.user}} 
router.post('/{{.}}', authorize(), {{.}}); 
{{/post.user}}

module.exports = router;

// CONTROLLERS

// get.public
{{#get.public}}
{{/get.public}}


// get.admin
{{#get.admin}} 
function {{.}} (req, res, next) {
    var request_body = {...req.body}
    var request_object = {}
    Object.keys(request_body).forEach(key => { request_object = JSON.parse(key);});
    request_object.id = req.params.userId;
    userService.{{.}}(request_object)
        .then(handleUser(res)).catch(handleError(next));
};
{{/get.admin}}


// get.admin_self
{{#get.admin_self}}
function {{.}} (req, res, next) {
    const userId = req.params.userId;
    const tokenId = req.res.tokenId;
    const roles = req.res.roles;
    if( !roles.includes(Role.Admin) && userId != tokenId) {
        return res.status(401).json({message: 'Unauthorized - {{.}}'});
    }
    var request_body = {...req.body}
    var request_object = {}
    Object.keys(request_body).forEach(key => { request_object = JSON.parse(key);});
    request_object.id = userId;
    request_object.tokenId = tokenId;
    userService.{{.}}(request_object)
        .then(handleUser(res)).catch(handleError(next));
};

{{/get.admin_self}}

//get.user
{{#get.user}} 
{{/get.user}}

// post.public
{{#post.public}} 
function {{.}} (req, res, next) {
    userService.{{.}}(req.body)
        .then(handleUser(res)).catch(handleError(next));
}
{{/post.public}}

// post.admin
{{#post.admin}} 
{{/post.admin}}

// post.admin_self
{{#post.admin_self}} 
function {{.}} (req, res, next) {
    const userId = req.params.userId;
    const tokenId = req.res.tokenId;
    const roles = req.res.roles;
    if( !roles.includes(Role.Admin) && userId != tokenId) {
        return res.status(401).json({message: 'Unauthorized - update'});
    }
    console.log(req.body);
    var request_object = {...req.body}
    request_object.id = userId;
    request_object.tokenId = tokenId;
    console.log(request_object);
    userService.{{.}}(request_object)
        .then(handleUser(res)).catch(handleError(next));
};

{{/post.admin_self}}

//post.user
{{#post.user}} 
{{/post.user}}

//admin_list
{{#admin_list}}
function {{.}} (req, res, next) {
    var request_body = {...req.body}
    var request_object = {}
    Object.keys(request_body).forEach(key => { request_object = JSON.parse(key);});
    request_object.id = req.params.userId;
    userService.{{.}}(request_object)
        .then(handleUser(res)).catch(handleError(next));
};

{{/admin_list}}

//admin_self_list
{{#admin_self_list}}
function {{.}} (req, res, next) {
    const userId = req.params.userId;
    const tokenId = req.res.tokenId;
    const roles = req.res.roles;
    if( !roles.includes(Role.Admin) && userId != tokenId) {
        return res.status(401).json({message: 'Unauthorized - {{.}}'});
    }
    var request_body = {...req.body}
    var request_object = {}
    Object.keys(request_body).forEach(key => { request_object = JSON.parse(key);});
    request_object.id = userId;
    request_object.tokenId = tokenId;
    userService.{{.}}(request_object)
        .then(handleUser(res)).catch(handleError(next));
};

{{/admin_self_list}}

//user_list
{{#user_list}}
function {{.}} (req, res, next) {
    const userId = req.params.userId;
    const tokenId = req.res.tokenId;
    var request_body = {...req.body}
    var request_object = {}
    Object.keys(request_body).forEach(key => { request_object = JSON.parse(key);});
    request_object.id = userId;
    request_object.tokenId = tokenId;
    userService.{{.}}(request_object)
        .then(handleUser(res)).catch(handleError(next));
};

{{/user_list}}